---
- name: Download VMware workstation bundle
  get_url:
    url: https://www.vmware.com/go/getWorkstation-linux
    dest: /tmp/vmware-workstation.bundle
    mode: 0551

- name: Install VMware workstation
  become: true
  become_method: sudo
  command: /tmp/vmware-workstation.bundle --eulas-agreed --required --console -i /tmp/vmware-workstation.bundle

- name: Verify that vmx exists
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  shell: "[[ -f {{ cuckoo_appliance_folder }}/{{ cuckoo_vm_label }}.vmx ]] && echo \"VM does not exist\" || echo \"VM does exist\""
  register: vm_name

- name: Copy VM folder from root of host to Cuckoo User
  become: true
  become_method: sudo
  copy:
    src: "/home/{{ user }}{{ cuckoo_appliance_folder }}/"
    dest: "/home/cuckoo/vmware/"
    mode: 0644
  failed_when: vm_name.stdout_lines == "VM does not exist"

- name: Change owner of {{ cuckoo_appliance_folder }} folder to "{{ cuckoo_user }}"
  become: true
  become_method: sudo
  file:
    path: "{{ cuckoo_appliance_folder }}"
    state: directory
    recurse: yes
    owner: "{{ cuckoo_user }}"
    group: "{{ cuckoo_user }}"

- name: Copy vmrest api configuration file to cuckoo host
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  copy:
    src: "{{ item }}"
    dest: "/home/cuckoo/"
    mode: 0644
  with_fileglob:
    - .vmrestCfg

- name: Start vmrest api
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: vmrest
  async: 45
  poll: 0

- name: Find VMs
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: "curl -s 'http://127.0.0.1:8697/api/vms' -X GET --header 'Accept: appliation/vnd.vmware.vmw.rest-v1+json' --header 'Authorization: Basic YmFjaDpCYWNoITIzNA=='"
  register: existingVM

#- name: print existingVM  #  debug function
#  debug:
#    msg: "{{ existingVM.stdout_lines }}"

- name: Verify and find ID of our machine
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  shell: "echo {{ existingVM.stdout_lines }} | grep -A 1 /home/cuckoo/vmware/cuckoo1/cuckoo1.vmx | awk -F ':' '{print $2}' | sed 's/path//g' | sed 's/ \"//g' | sed 's/\",, u   \"//g'"
  register: vmId

#- name: Print vmId       #  debug function
#  debug:
#    msg: "{{ vmId.stdout }}"

- name: Set VM network to host hostonly
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  shell: |
    curl -s 'http://127.0.0.1:8697/api/vms/{{ vmId.stdout }}/nic/1' -X PUT --header 'Content-Type: application/vnd.vmware.vmw.rest-v1+json' --header 'Accept: application/vnd.vmware.vmw.rest-v1+json' --header 'Authorization: Basic YmFjaDpCYWNoITIzNA==' -d @- <<REQUEST_BODY
    {
      "type": "hostonly",
      "vmnet": ""
    }
    REQUEST_BODY
  register: hostOnlyResponse

- name: Print hostOnlyResponse  #  debug function
  debug:
    msg: "{{ hostOnlyResponse }}"

- name: Get response code
  shell: "echo {{ hostOnlyResponse.stdout_lines }} | grep Code | awk -F ':' '{print $2}' | sed 's/ //g' | sed 's/,,u\"Message\"//g'"
  register: responseCode

- name: Print response code    # debug function
  debug:
    msg: "{{ responseCode.stdout }}"

- name: Start VM {{ cuckoo_vm_label }} if in suspended state
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: "vmrun start {{ cuckoo_appliance_folder }}/{{ cuckoo_vm_label }}.vmx nogui"
  when: responseCode.stdout == "107"

- name: Wait for VM get fully booted
  pause:
    minutes: 3
  when: responseCode.stdout == "10

- name: Poweroff VM {{ cuckoo_vm_label }} if in suspended state
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: "vmrun stop {{ cuckoo_appliance_folder }}/{{ cuckoo_vm_label }}.vmx"
  when: responseCode.stdout == "107"

- name: Wait for VM get shut down
  pause:
    minutes: 1
  when: responseCode.stdout == "107"

- name: Set VM network to host hostonly
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  shell: |
    curl -s 'http://127.0.0.1:8697/api/vms/{{ vmId.stdout_lines }}/nic/1' -X PUT --header 'Content-Type: application/vnd.vmware.vmw.rest-v1+json' --header 'Accept: application/vnd.vmware.vmw.rest-v1+json' --header 'Authorization: Basic YmFjaDpCYWNoITIzNA==' -d @- <<REQUEST_BODY
    {
      "type": "hostonly",
      "vmnet": ""
    }
    REQUEST_BODY
  when: responseCode.stdout == "107"

- name: Configure {{ vmwareNetworkAdapter }} to be up
  become: true
  become_method: sudo
  command: ifconfig {{ vmwareNetworkAdapter }} 192.168.56.1 netmask 255.255.255.0 broadcast 192.168.56.255 up

- name: Start VM {{ cuckoo_vm_label }}
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: "vmrun start {{ cuckoo_appliance_folder }}/{{ cuckoo_vm_label }}.vmx nogui"

- name: Wait for VM get fully booted
  pause:
    minutes: 3

- name: Check for snapshots from {{ cuckoo_vm_label }}
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: "vmrun listSnapshots {{ cuckoo_appliance_folder }}/{{ cuckoo_vm_label }}.vmx"
  register: vm_snapshots

- name: Take a VM snapshot for {{ cuckoo_vm_label }}
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: "vmrun snapshot {{ cuckoo_appliance_folder }}/{{ cuckoo_vm_label }}.vmx {{ cuckoo_vm_label }}-snapshot1"
  when: vm_snapshots.stdout_lines == 'Total snapshots 0'

- name: Poweroff VM {{ cuckoo_vm_label }}
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: "vmrun stop {{ cuckoo_appliance_folder }}/{{ cuckoo_vm_label }}.vmx"

- name: Restore VM snapshot for {{ cuckoo_vm_label }}
  become: true
  become_method: sudo
  become_user: "{{ cuckoo_user }}"
  command: "vmrun revertToSnapshot \"{{ cuckoo_appliance_folder }}/{{ cuckoo_vm_label }}.vmx\" {{ cuckoo_vm_label }}-snapshot1"





# AppArmor profile to be included?
